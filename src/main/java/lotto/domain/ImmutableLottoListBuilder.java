package lotto.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

import lotto.domain.core.Lotto;
import lotto.domain.core.LottoGenerator;

import static java.util.stream.Collectors.toList;

class ImmutableLottoListBuilder {
    private List<Lotto> lottos;

    private void init() {
        if (Objects.isNull(this.lottos)) {
            this.lottos = new ArrayList<>();
        }
    }

    ImmutableLottoListBuilder lotto(Lotto lotto) {
        init();
        this.lottos.add(lotto);
        return this;
    }

    ImmutableLottoListBuilder lottos(Collection<Lotto> lottos) {
        init();
        this.lottos.addAll(lottos);
        return this;
    }

    ImmutableLottoListBuilder autoLottos(int autoGeneratedCount) {
        init();
        final List<Lotto> autoLottos = Stream.generate(LottoGenerator::automatic)
                                             .limit(autoGeneratedCount)
                                             .collect(toList());

        lottos(autoLottos);
        return this;
    }

    ImmutableLottoList build(){
        return new ImmutableLottoList(this.lottos);
    }
}
