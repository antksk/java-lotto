package lotto.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Supplier;
import java.util.stream.Stream;

import lotto.domain.core.Lotto;
import lotto.domain.core.LottoGenerator;

import static java.util.stream.Collectors.toList;

class ImmutableLotteriesBuilder {
    private List<Lotto> lottos;

    private void init() {
        if (Objects.isNull(this.lottos)) {
            this.lottos = new ArrayList<>();
        }
    }

    ImmutableLotteriesBuilder lotto(Lotto lotto) {
        init();
        this.lottos.add(lotto);
        return this;
    }

    ImmutableLotteriesBuilder lottos(Collection<Lotto> lottos) {
        init();
        this.lottos.addAll(lottos);
        return this;
    }

    ImmutableLotteriesBuilder autoLottos(int autoGeneratedCount) {
        init();
        final List<Lotto> autoLottos = Stream.generate(LottoGenerator::automatic)
                                             .limit(autoGeneratedCount)
                                             .collect(toList());

        lottos(autoLottos);
        return this;
    }

    ImmutableLotteriesBuilder manualLotto(int manualLottoCount, Supplier<Set<Integer>> manualLotto){
        init();
        final  List<Lotto> manualLottos = Stream.generate(manualLotto)
                                                .limit(manualLottoCount)
                                                .map(LottoGenerator::fromIntSet)
                                                .collect(toList())
            ;
        lottos(manualLottos);
        return this;
    }

    ImmutableLotteries build(){
        return new ImmutableLotteries(this.lottos);
    }
}
